name: Build Releases

on:
  workflow_dispatch:

jobs:
  build-windows-cuda:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
          # lfs: true
          token: ${{ secrets.LLS_CICD }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9.13

    - name: Initialize B2
      run: |
        pip3 install --upgrade b2
        b2 authorize_account ${{ secrets.B2_KEY_ID }} ${{ secrets.B2_APP_KEY }}

    - name: Download static files from B2
      run: |
        b2 sync --threads 10 b2://${{ secrets.B2_BUCKET }} .\b2

    - name: Install dependencies
      run: |
        pip install llama-cpp-python==0.2.74 --extra-index-url https://abetlen.github.io/llama-cpp-python/whl/cpu
        pip install -r requirements.txt
        pip install pyinstaller==5.13.2

    - name: Build with PyInstaller
      run: pyinstaller app.spec

    - name: Copy lib_llama_cpp files
      shell: cmd
      run: xcopy .\b2\lib\win64_cuda\lib_llama_cpp .\dist\app\llama_cpp /E /H /C /I /Y

    - name: Copy lib_cuda files
      shell: cmd
      run: xcopy .\b2\lib\win64_cuda\lib_cuda .\dist\app /E /H /C /I /Y

    - name: Zip the build
      run: Compress-Archive -Path .\dist\app\* -DestinationPath ./LLS-win-x64-cuda-$(Get-Content .\version.txt).zip -Force

    - name: Read version from file
      id: version_windows
      run: |
        echo "VERSION=$(type .\version.txt)" | Out-String -Stream | Set-Content -Path $env:GITHUB_ENV

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-cuda-build
        path: ./LLS-win-x64-cuda-${{ env.VERSION }}.zip

  build-macos-arm64:
    runs-on: macos-latest
    needs: build-windows-cuda

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
          # lfs: true
          token: ${{ secrets.LLS_CICD }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9.13

    - name: Install dependencies
      run: |
        pip install llama-cpp-python==0.2.74 --extra-index-url https://abetlen.github.io/llama-cpp-python/whl/cpu
        pip install -r requirements.txt
        pip install pyinstaller==5.13.2

    - name: Build with PyInstaller
      run: pyinstaller app.spec

    - name: Zip the build
      run: |
        cd ./dist/app
        zip -r ../../LLS-darwin-arm64-$(cat ../../version.txt).zip .

    - name: Read version from file
      id: version
      run: |
        echo "VERSION=$(cat ./version.txt)" >> $GITHUB_ENV

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: macos-arm64-build
        path: ./LLS-darwin-arm64-${{ env.VERSION }}.zip

  build-windows-cpu:
    runs-on: windows-latest
    needs: [build-windows-cuda, build-macos-arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
          # lfs: true
          token: ${{ secrets.LLS_CICD }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9.13

    - name: Install dependencies
      run: |
        pip install llama-cpp-python==0.2.74 --extra-index-url https://abetlen.github.io/llama-cpp-python/whl/cpu
        pip install -r requirements.txt
        pip install pyinstaller==5.13.2

    - name: Build with PyInstaller
      run: pyinstaller app.spec

    - name: Copy CPU-only default config
      shell: cmd
      run: xcopy .\config_cpuonly .\dist\app\config /E /H /C /I /Y

    - name: Zip the build
      run: Compress-Archive -Path .\dist\app\* -DestinationPath ./LLS-win-x64-cpu-$(Get-Content .\version.txt).zip -Force

    - name: Read version from file
      id: version_windows
      run: |
        echo "VERSION=$(type .\version.txt)" | Out-String -Stream | Set-Content -Path $env:GITHUB_ENV

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-cpu-build
        path: ./LLS-win-x64-cpu-${{ env.VERSION }}.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows-cuda, build-windows-cpu, build-windows-cpu]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # lfs: true
        token: ${{ secrets.LLS_CICD }}

    - name: Read version from file
      id: version
      run: |
        echo "VERSION=$(cat ./version.txt)" >> $GITHUB_ENV

    - name: Generate tag name
      run: |
        echo "TAG_VERSION=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

    - name: Download macOS Build
      uses: actions/download-artifact@v3
      with:
        name: macos-arm64-build
        path: ./dist

    - name: Download Windows (CPU) Build
      uses: actions/download-artifact@v3
      with:
        name: windows-cpu-build
        path: ./dist

    - name: Download Windows (CUDA) Build
      uses: actions/download-artifact@v3
      with:
        name: windows-cuda-build
        path: ./dist

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.LLS_CICD }}
      with:
        tag_name: combined-release-${{ env.TAG_VERSION }}
        release_name: Combined Release of LLS-${{ env.VERSION }}
        body: |
          Combined release of:
          - macOS (Apple Silicon): LLS-darwin-arm64-${{ env.VERSION }}
          - Windows (CPU): LLS-win-x64-cpu-${{ env.VERSION }}
          - Windows (CUDA): LLS-win-x64-cuda-${{ env.VERSION }}
        draft: false
        prerelease: false

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.LLS_CICD }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/LLS-darwin-arm64-${{ env.VERSION }}.zip
        asset_name: LLS-darwin-arm64-${{ env.VERSION }}.zip
        asset_content_type: application/zip

    - name: Upload Windows (CPU) Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.LLS_CICD }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/LLS-win-x64-cpu-${{ env.VERSION }}.zip
        asset_name: LLS-win-x64-cpu-${{ env.VERSION }}.zip
        asset_content_type: application/zip

    - name: Upload Windows (CUDA) Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.LLS_CICD }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/LLS-win-x64-cuda-${{ env.VERSION }}.zip
        asset_name: LLS-win-x64-cuda-${{ env.VERSION }}.zip
        asset_content_type: application/zip
